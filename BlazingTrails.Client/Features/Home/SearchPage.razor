@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"

@inject HttpClient Http
@inject NavigationManager NavManager

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            Search
        </li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for @SearchTerm</h3>

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}


@code {
    private Trail? _selectedTrail;
    private IEnumerable<Trail>? _searchResults;

    [Parameter]
    public string SearchTerm { get; set; } = default!;
    [Parameter]
    public int? MaxLength { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");

            _searchResults = allTrails.Where(x =>
                x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Ther was a problem load trail data: {ex.Message}");
        }
    }


    private void HandleTrailSelected(Trail trail) => _selectedTrail = trail;
}